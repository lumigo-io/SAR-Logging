AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: auto-set-log-group-retention
    Description: Updates the retention policy for new and existing CloudWatch log groups to the specified number of days.
    Author: Lumigo
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ["cloudwatch", "logs", "ops", "devops"]
    HomePageUrl: https://github.com/Cazoo-uk/SAR-Logging
    SemanticVersion: 1.4.0
    SourceCodeUrl: https://github.com/Cazoo-uk/SAR-Logging

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Environment:
      Variables:
        RETENTION_DAYS: !Ref RetentionDays

Resources:
  SetRetentionForNewLogGroups:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://auto-set-log-group-retention/SetRetentionForNew.zip
      Handler: functions/set-retention.newLogGroups
      Description: Updates the retention policy for a newly create CloudWatch log group to the specified number of days.
      Timeout: 6
      Policies:
        - Statement:
            Effect: Allow
            Action: logs:PutRetentionPolicy
            Resource: "*"
      Events:
        SubscribeEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.logs
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - logs.amazonaws.com
                eventName:
                  - CreateLogGroup

  SetRetentionForNewLogGroupsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SetRetentionForNewLogGroups}

  SetRetentionForExistingLogGroups:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://auto-set-log-group-retention/SetRetentionForExisting.zip
      Handler: functions/set-retention.existingLogGroups
      Description: Updates the retention policy for existing log groups to match the configured number of days.
      Timeout: 900
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - logs:PutRetentionPolicy
              - logs:DescribeLogGroups
            Resource: "*"

  SetRetentionForExistingLogGroupsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SetRetentionForExistingLogGroups}

  LambdaInvocationCustomResource:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/lambda-invocation-cfn-custom-resource
        SemanticVersion: 1.4.0

  # custom resource to invoke the SubscribeExistingLogGroups function during deployment
  InvokeSetRetentionForExistingLogGroups:
    Type: Custom::LambdaInvocation
    DependsOn:
      - SetRetentionForExistingLogGroups
      - LambdaInvocationCustomResource
    Properties:
      ServiceToken: !GetAtt LambdaInvocationCustomResource.Outputs.FunctionArn
      FunctionName: !Ref SetRetentionForExistingLogGroups
      InvocationType: Event # don't wait for the subscribe existing function to finish
      # this ties this custom resource to changes to the function's configuration
      # so that when CloudFormation would detect this custom resource as "changed"
      # and triggers "Update" event during deployment
      Configurations:
        RETENTION_DAYS: !Ref RetentionDays

Parameters:
  RetentionDays:
    Type: Number
    Default: 7
    Description: The number of days to retain logs in CloudWatch Logs for.
