AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: auto-subscribe-log-group-to-arn
    Description: Subscribes new and existing CloudWatch log groups to Lambda/Kinesis/Firehose by ARN.
    Author: Lumigo
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cloudwatch', 'logs', 'ops', 'devops']
    HomePageUrl: https://github.com/lumigo/SAR-Logging
    SemanticVersion: 1.11.1
    SourceCodeUrl: https://github.com/lumigo/SAR-Logging

Globals:
  Function:
    Runtime: nodejs10.x
    MemorySize: 128
    Environment:
      Variables:
        PREFIX: !Ref Prefix
        TAGS: !Ref Tags
        TAGS_MODE: !Ref TagsMode
        EXCLUDE_TAGS: !Ref ExcludeTags
        EXCLUDE_TAGS_MODE: !Ref ExcludeTagsMode
        EXCLUDE_PREFIX: !Ref ExcludePrefix
        DESTINATION_ARN: !Ref DestinationArn
        FILTER_NAME: !Ref FilterName
        FILTER_PATTERN: !Ref FilterPattern
        ROLE_ARN: !GetAtt CloudWatchToKinesisRole.Arn
        LOG_LEVEL: INFO
        OVERRIDE_MANUAL_CONFIGS: !Ref OverrideManualConfigs

Conditions:
  Unsubscribe: !Equals [!Ref UnsubscribeOnDelete, 'true']

Resources:
  SubscribeNewLogGroups:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/subscribe.newLogGroups
      Description: Subscribes a newly create CloudWatch log group to the specified ARN
      Timeout: 900
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - logs:PutSubscriptionFilter
              - logs:ListTagsLogGroup
            Resource: '*'
        - Statement:
            Effect: Allow
            Action: lambda:AddPermission
            Resource: '*'
        - Statement: # required for subscribing to a Kinesis stream
            Effect: Allow
            Action: iam:PassRole
            Resource: '*'
      Events:
        SubscribeEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.logs
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - logs.amazonaws.com
                eventName:
                  - CreateLogGroup

  SubscribeNewLogGroupsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SubscribeNewLogGroups}

  SubscribeExistingLogGroups:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/subscribe.existingLogGroups
      Description: Subscribes existing log groups to the specified destination ARN.
      Timeout: 900
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
              - logs:DescribeLogGroups
              - logs:DescribeSubscriptionFilters
              - logs:ListTagsLogGroup
            Resource: '*'
        - Statement:
            Effect: Allow
            Action: lambda:AddPermission
            Resource: '*'
        - Statement: # required for subscribing to a Kinesis stream
            Effect: Allow
            Action: iam:PassRole
            Resource: '*'

  SubscribeExistingLogGroupsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SubscribeExistingLogGroups}

  UnsubscribeExistingLogGroups:
    Type: AWS::Serverless::Function
    Condition: Unsubscribe
    Properties:
      Handler: functions/subscribe.undo
      Description: Undo the subscription filter for existing log groups.
      Timeout: 900
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - logs:DeleteSubscriptionFilter
              - logs:DescribeLogGroups
              - logs:DescribeSubscriptionFilters
              - logs:ListTagsLogGroup
            Resource: '*'

  UnsubscribeExistingLogGroupsLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: Unsubscribe
    Properties:
      LogGroupName: !Sub /aws/lambda/${UnsubscribeExistingLogGroups}

  CloudWatchToKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: !Sub logs.${AWS::Region}.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version : '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:put*
                  - firehose:put*
                Resource: '*'

  LambdaInvocationCustomResource:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/lambda-invocation-cfn-custom-resource
        SemanticVersion: 1.4.0

  # custom resource to invoke the SubscribeExistingLogGroups function during deployment
  InvokeSubscribeExistingLogGroups:
    Type: Custom::LambdaInvocation
    DependsOn:
      - SubscribeExistingLogGroups
      - LambdaInvocationCustomResource
    Properties:
      ServiceToken: !GetAtt LambdaInvocationCustomResource.Outputs.FunctionArn
      FunctionName: !Ref SubscribeExistingLogGroups
      InvocationType: Event # don't wait for the subscribe existing function to finish
      # this ties this custom resource to changes to the function's configuration
      # so that when CloudFormation would detect this custom resource as "changed"
      # and triggers "Update" event during deployment
      Configurations:
        PREFIX: !Ref Prefix
        TAGS: !Ref Tags
        TAGS_MODE: !Ref TagsMode
        EXCLUDE_TAGS: !Ref ExcludeTags
        EXCLUDE_TAGS_MODE: !Ref ExcludeTagsMode
        EXCLUDE_PREFIX: !Ref ExcludePrefix
        DESTINATION_ARN: !Ref DestinationArn
        FILTER_NAME: !Ref FilterName
        FILTER_PATTERN: !Ref FilterPattern
        ROLE_ARN: !GetAtt CloudWatchToKinesisRole.Arn
        LOG_LEVEL: INFO
        OVERRIDE_MANUAL_CONFIGS: !Ref OverrideManualConfigs

  # custom resource to invoke the UnsubscribeExistingLogGroups function during deployment
  InvokeUnsubscribeExistingLogGroups:
    Type: Custom::LambdaInvocation
    Condition: Unsubscribe
    DependsOn:
      - UnsubscribeExistingLogGroups
      - LambdaInvocationCustomResource
    Properties:
      ServiceToken: !GetAtt LambdaInvocationCustomResource.Outputs.FunctionArn
      FunctionName: !Ref UnsubscribeExistingLogGroups
      InvocationType: RequestResponse # wait for the unsubscribe function to finish
      When: Delete # only run this during delete

Parameters:
  DestinationArn:
    Type: String
    Description: >
      The ARN of the Lambda function or Kinesis stream to subscribe a newly created CloudWatch log group to.
  Prefix:
    Type: String
    Default: ''
    Description: >
      (Optional) if specified then only log groups with the prefix will be subscribed.
      E.g. '/aws/lambda/' will subscribe only Lambda function logs
  Tags:
    Type: String
    Default: ''
    Description: >
      (Optional) specify a common separated list of tags to whitelist log groups with, e.g. 'tag1=value1,tag2,tag3'
      Which can test for the existence of a tag (e.g. 'tag2'), and can also test the value of the tag too
      (e.g. 'tag1=value1').
      Whether the tests are treated with 'AND' or 'OR' semantics depends on the TagMode parameter.
  TagsMode:
    Type: String
    Default: 'OR'
    AllowedValues:
      - 'AND'
      - 'OR'
    Description: >
      (Optional) controls how to combine the different tag tests, whether to join them using AND or OR semantic.
      Allowed values are "AND" or "OR". Defaults to "OR".
  ExcludeTags:
    Type: String
    Default: ''
    Description: >
      (Optional) specify a common separated list of tags to blacklist log groups with, e.g. 'tag1=value1,tag2,tag3'
      Which can test for the existence of a tag (e.g. 'tag2'), and can also test the value of the tag too
      (e.g. 'tag1=value1').
      Whether the tests are treated with 'AND' or 'OR' semantics depends on the ExcludeTagMode parameter.
  ExcludeTagsMode:
    Type: String
    Default: 'OR'
    AllowedValues:
      - 'AND'
      - 'OR'
    Description: >
      (Optional) controls how to combine the different exclude tag tests, whether to join them using AND or OR semantic.
      Allowed values are "AND" or "OR". Defaults to "OR".
  FilterName:
    Type: String
    Default: 'ship-logs'
    Description: >
      (Optional) if specified, will override the filter name for the subscription.
  FilterPattern:
    Type: String
    Default: '[timestamp=*Z, request_id="*-*", event]'
    Description: >
      (Optional) if specified, will override the filter pattern used to create the subscription.
  ExcludePrefix:
    Type: String
    Default: ''
    Description: >
      (Optional) if specified then log groups that match the prefix will not be subscribed.
      E.g. '/aws/lambda/my-function-' will exclude Lambda function logs for functions that start with 'my-function-'
  OverrideManualConfigs:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: >
      (optional) whether to replace any subscription filters that were added manually (judging by the
      fact they have different filter name).
      Defaults to "false", allowed values are "true" or "false".
  UnsubscribeOnDelete:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: >
      (optional) whether to remove the subscription filters that were added by this app.
      Defaults to "false", allowed values are "true" or "false".
